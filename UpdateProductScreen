import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import '../widgets/snackbar_message.dart';

class UpdateProductScreen extends StatefulWidget {
  const UpdateProductScreen({super.key});

  @override
  State<UpdateProductScreen> createState() => _UpdateProductScreenState();
}

class _UpdateProductScreenState extends State<UpdateProductScreen> {
  bool _updateInProgress = false;

  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();

  final TextEditingController _nameTEController = TextEditingController();
  final TextEditingController _codeTEController = TextEditingController();
  final TextEditingController _priceTEController = TextEditingController();
  final TextEditingController _quantityTEController = TextEditingController();
  final TextEditingController _imageTEController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Update Product')),
      body: SingleChildScrollView(
        child: Form(
          key: _formKey,
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              children: [
                TextFormField(
                  controller: _nameTEController,
                  textInputAction: TextInputAction.next,
                  decoration: const InputDecoration(
                    hintText: 'Product name',
                    labelText: 'Product name',
                  ),
                  validator: (value) {
                    if (value?.trim().isEmpty ?? true) return 'Enter your value';
                    return null;
                  },
                ),
                TextFormField(
                  controller: _codeTEController,
                  textInputAction: TextInputAction.next,
                  decoration: const InputDecoration(
                    hintText: 'Product code',
                    labelText: 'Product code',
                  ),
                  validator: (value) {
                    if (value?.trim().isEmpty ?? true) return 'Enter your value';
                    return null;
                  },
                ),
                TextFormField(
                  controller: _quantityTEController,
                  textInputAction: TextInputAction.next,
                  decoration: const InputDecoration(
                    hintText: 'Product Quantity',
                    labelText: 'Product Quantity',
                  ),
                  validator: (value) {
                    if (value?.trim().isEmpty ?? true) return 'Enter your value';
                    return null;
                  },
                ),
                TextFormField(
                  controller: _priceTEController,
                  textInputAction: TextInputAction.next,
                  decoration: const InputDecoration(
                    hintText: 'Product price',
                    labelText: 'Product price',
                  ),
                  validator: (value) {
                    if (value?.trim().isEmpty ?? true) return 'Enter your value';
                    return null;
                  },
                ),
                TextFormField(
                  controller: _imageTEController,
                  textInputAction: TextInputAction.next,
                  decoration: const InputDecoration(
                    hintText: 'Image URL',
                    labelText: 'Image URL',
                  ),
                  validator: (value) {
                    if (value?.trim().isEmpty ?? true) return 'Enter your value';
                    return null;
                  },
                ),
                const SizedBox(height: 16),
                Visibility(
                  visible: !_updateInProgress,
                  replacement: const Center(child: CircularProgressIndicator()),
                  child: FilledButton(
                    onPressed: _onTapUpdateButton,
                    child: const Text('Update Product'),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  void _onTapUpdateButton() async {
    if (!_formKey.currentState!.validate()) return;

    _updateInProgress = true;
    setState(() {});

    Uri uri = Uri.parse('http://35.73.30.144:2008/api/v1/updateProduct');

    http.Response response = await http.put(
      uri,
      headers: {'Content-Type': 'application/json'},
      body: jsonEncode({
        "ProductName": _nameTEController.text,
        "ProductCode": _codeTEController.text,
        "Img": _imageTEController.text,
        "Qty": _quantityTEController.text,
        "UnitPrice": _priceTEController.text,
        "TotalPrice": (int.parse(_priceTEController.text) *
            int.parse(_quantityTEController.text))
            .toString(),
      }),
    );

    final decodedJson = jsonDecode(response.body);

    if (decodedJson['status'] == 'success') {
      _clearTextFields();
      showSnackBarMessage(context, 'Product updated successfully');
    } else {
      showSnackBarMessage(context, decodedJson['data'].toString());
    }

    _updateInProgress = false;
    setState(() {});
  }

  void _clearTextFields() {
    _nameTEController.clear();
    _codeTEController.clear();
    _priceTEController.clear();
    _quantityTEController.clear();
    _imageTEController.clear();
  }

  @override
  void dispose() {
    _nameTEController.dispose();
    _codeTEController.dispose();
    _priceTEController.dispose();
    _quantityTEController.dispose();
    _imageTEController.dispose();
    super.dispose();
  }
}
